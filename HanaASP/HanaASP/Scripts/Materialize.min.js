/** * material-design-lite - Material Design Components in CSS, JS and HTML * @version v1.0.1 * @license Apache-2.0 * @copyright 2015 Google, Inc. * @link https://github.com/google/material-design-lite */ function MaterialButton(e) { "use strict"; this.element_ = e, this.init() } function MaterialCheckbox(e) { "use strict"; this.element_ = e, this.init() } function MaterialIconToggle(e) { "use strict"; this.element_ = e, this.init() } function MaterialMenu(e) { "use strict"; this.element_ = e, this.init() } function MaterialProgress(e) { "use strict"; this.element_ = e, this.init() } function MaterialRadio(e) { "use strict"; this.element_ = e, this.init() } function MaterialSlider(e) { "use strict"; this.element_ = e, this.isIE_ = window.navigator.msPointerEnabled, this.init() } function MaterialSpinner(e) { "use strict"; this.element_ = e, this.init() } function MaterialSwitch(e) { "use strict"; this.element_ = e, this.init() } function MaterialTabs(e) { "use strict"; this.element_ = e, this.init() } function MaterialTab(e, t) { "use strict"; if (e) { if (t.element_.classList.contains(t.CssClasses_.MDL_JS_RIPPLE_EFFECT)) { var s = document.createElement("span"); s.classList.add(t.CssClasses_.MDL_RIPPLE_CONTAINER), s.classList.add(t.CssClasses_.MDL_JS_RIPPLE_EFFECT); var i = document.createElement("span"); i.classList.add(t.CssClasses_.MDL_RIPPLE), s.appendChild(i), e.appendChild(s) } e.addEventListener("click", function (s) { s.preventDefault(); var i = e.href.split("#")[1], n = t.element_.querySelector("#" + i); t.resetTabState_(), t.resetPanelState_(), e.classList.add(t.CssClasses_.ACTIVE_CLASS), n.classList.add(t.CssClasses_.ACTIVE_CLASS) }) } } function MaterialTextfield(e) { "use strict"; this.element_ = e, this.maxRows = this.Constant_.NO_MAX_ROWS, this.init() } function MaterialTooltip(e) { "use strict"; this.element_ = e, this.init() } function MaterialLayout(e) { "use strict"; this.element_ = e, this.init() } function MaterialLayoutTab(e, t, s, i) { "use strict"; if (e) { if (i.tabBar_.classList.contains(i.CssClasses_.JS_RIPPLE_EFFECT)) { var n = document.createElement("span"); n.classList.add(i.CssClasses_.RIPPLE_CONTAINER), n.classList.add(i.CssClasses_.JS_RIPPLE_EFFECT); var a = document.createElement("span"); a.classList.add(i.CssClasses_.RIPPLE), n.appendChild(a), e.appendChild(n) } e.addEventListener("click", function (n) { n.preventDefault(); var a = e.href.split("#")[1], l = i.content_.querySelector("#" + a); i.resetTabState_(t), i.resetPanelState_(s), e.classList.add(i.CssClasses_.IS_ACTIVE), l.classList.add(i.CssClasses_.IS_ACTIVE) }) } } function MaterialDataTable(e) { "use strict"; this.element_ = e, this.init() } function MaterialRipple(e) { "use strict"; this.element_ = e, this.init() } var componentHandler = function () { "use strict"; function e(e, t) { for (var s = 0; s_; _++) { if (o = l[_], !o) throw new Error("Unable to find a registered component for the given class."); a.push(o.className), i.setAttribute("data-upgraded", a.join(",")); var h = new o.classConstructor(i); h[C] = o, u.push(h); for (var p = 0, E = o.callbacks.length; E > p; p++)o.callbacks[p](i); o.widget && (i[o.className] = h); var m = document.createEvent("Events"); m.initEvent("mdl-componentupgraded", !0, !0), i.dispatchEvent(m) } } function a(e) { Array.isArray(e) || (e = "function" == typeof e.item ? Array.prototype.slice.call(e) : [e]); for (var t, s = 0, i = e.length; i > s; s++)t = e[s], t instanceof HTMLElement && (t.children.length > 0 && a(t.children), n(t)) } function l(t) { var s = { classConstructor: t.constructor, className: t.classAsString, cssClass: t.cssClass, widget: void 0 === t.widget ? !0 : t.widget, callbacks: [] }; if (c.forEach(function (e) { if (e.cssClass === s.cssClass) throw new Error("The provided cssClass has already been registered."); if (e.className === s.className) throw new Error("The provided className has already been registered") }), t.constructor.prototype.hasOwnProperty(C)) throw new Error("MDL component classes must not have " + C + " defined as a property."); var i = e(t.classAsString, s); i || c.push(s) } function r(t, s) { var i = e(t); i && i.callbacks.push(s) } function o() { for (var e = 0; e0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE) && (e.keyCode === this.Keycodes_.UP_ARROW ? (e.preventDefault(), t[t.length - 1].focus()) : e.keyCode === this.Keycodes_.DOWN_ARROW && (e.preventDefault(), t[0].focus()))}}, MaterialMenu.prototype.handleItemKeyboardEvent_ = function (e) { "use strict"; if (this.element_ && this.container_) { var t = this.element_.querySelectorAll("." + this.CssClasses_.ITEM + ":not([disabled])"); if (t && t.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) { var s = Array.prototype.slice.call(t).indexOf(e.target); if (e.keyCode === this.Keycodes_.UP_ARROW) e.preventDefault(), s > 0 ? t[s - 1].focus() : t[t.length - 1].focus(); else if (e.keyCode === this.Keycodes_.DOWN_ARROW) e.preventDefault(), t.length > s + 1 ? t[s + 1].focus() : t[0].focus(); else if (e.keyCode === this.Keycodes_.SPACE || e.keyCode === this.Keycodes_.ENTER) { e.preventDefault(); var i = new MouseEvent("mousedown"); e.target.dispatchEvent(i), i = new MouseEvent("mouseup"), e.target.dispatchEvent(i), e.target.click() } else e.keyCode === this.Keycodes_.ESCAPE && (e.preventDefault(), this.hide()) } } }, MaterialMenu.prototype.handleItemClick_ = function (e) { "use strict"; null !== e.target.getAttribute("disabled") ? e.stopPropagation() : (this.closing_ = !0, window.setTimeout(function (e) { this.hide(), this.closing_ = !1 }.bind(this), this.Constant_.CLOSE_TIMEOUT)) }, MaterialMenu.prototype.applyClip_ = function (e, t) { "use strict"; this.element_.style.clip = this.element_.classList.contains(this.CssClasses_.UNALIGNED) ? null : this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT) ? "rect(0 " + t + "px 0 " + t + "px)" : this.element_.classList.contains(this.CssClasses_.TOP_LEFT) ? "rect(" + e + "px 0 " + e + "px 0)" : this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) ? "rect(" + e + "px " + t + "px " + e + "px " + t + "px)" : null }, MaterialMenu.prototype.addAnimationEndListener_ = function () { "use strict"; var e = function () { this.element_.removeEventListener("transitionend", e), this.element_.removeEventListener("webkitTransitionEnd", e), this.element_.classList.remove(this.CssClasses_.IS_ANIMATING) }.bind(this); this.element_.addEventListener("transitionend", e), this.element_.addEventListener("webkitTransitionEnd", e) }, MaterialMenu.prototype.show = function (e) { "use strict"; if (this.element_ && this.container_ && this.outline_) { var t = this.element_.getBoundingClientRect().height, s = this.element_.getBoundingClientRect().width; this.container_.style.width = s + "px", this.container_.style.height = t + "px", this.outline_.style.width = s + "px", this.outline_.style.height = t + "px"; for (var i = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION, n = this.element_.querySelectorAll("." + this.CssClasses_.ITEM), a = 0; a = this.maxRows && e.preventDefault()},MaterialTextfield.prototype.onFocus_ = function (e) { "use strict"; this.element_.classList.add(this.CssClasses_.IS_FOCUSED) }, MaterialTextfield.prototype.onBlur_ = function (e) { "use strict"; this.element_.classList.remove(this.CssClasses_.IS_FOCUSED) }, MaterialTextfield.prototype.updateClasses_ = function () { "use strict"; this.checkDisabled(), this.checkValidity(), this.checkDirty() }, MaterialTextfield.prototype.checkDisabled = function () { "use strict"; this.input_.disabled ? this.element_.classList.add(this.CssClasses_.IS_DISABLED) : this.element_.classList.remove(this.CssClasses_.IS_DISABLED) }, MaterialTextfield.prototype.checkValidity = function () { "use strict"; this.input_.validity.valid ? this.element_.classList.remove(this.CssClasses_.IS_INVALID) : this.element_.classList.add(this.CssClasses_.IS_INVALID) }, MaterialTextfield.prototype.checkDirty = function () { "use strict"; this.input_.value && this.input_.value.length > 0 ? this.element_.classList.add(this.CssClasses_.IS_DIRTY) : this.element_.classList.remove(this.CssClasses_.IS_DIRTY) }, MaterialTextfield.prototype.disable = function () { "use strict"; this.input_.disabled = !0, this.updateClasses_() }, MaterialTextfield.prototype.enable = function () { "use strict"; this.input_.disabled = !1, this.updateClasses_() }, MaterialTextfield.prototype.change = function (e) { "use strict"; e && (this.input_.value = e), this.updateClasses_() }, MaterialTextfield.prototype.init = function () { "use strict"; this.element_ && (this.label_ = this.element_.querySelector("." + this.CssClasses_.LABEL), this.input_ = this.element_.querySelector("." + this.CssClasses_.INPUT), this.input_ && (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE) && (this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10), isNaN(this.maxRows) && (this.maxRows = this.Constant_.NO_MAX_ROWS)), this.boundUpdateClassesHandler = this.updateClasses_.bind(this), this.boundFocusHandler = this.onFocus_.bind(this), this.boundBlurHandler = this.onBlur_.bind(this), this.input_.addEventListener("input", this.boundUpdateClassesHandler), this.input_.addEventListener("focus", this.boundFocusHandler), this.input_.addEventListener("blur", this.boundBlurHandler), this.maxRows !== this.Constant_.NO_MAX_ROWS && (this.boundKeyDownHandler = this.onKeyDown_.bind(this), this.input_.addEventListener("keydown", this.boundKeyDownHandler)), this.updateClasses_(), this.element_.classList.add(this.CssClasses_.IS_UPGRADED))) }, MaterialTextfield.prototype.mdlDowngrade_ = function () { "use strict"; this.input_.removeEventListener("input", this.boundUpdateClassesHandler), this.input_.removeEventListener("focus", this.boundFocusHandler), this.input_.removeEventListener("blur", this.boundBlurHandler), this.boundKeyDownHandler && this.input_.removeEventListener("keydown", this.boundKeyDownHandler) }, componentHandler.register({ constructor: MaterialTextfield, classAsString: "MaterialTextfield", cssClass: "mdl-js-textfield", widget: !0 }), MaterialTooltip.prototype.Constant_ = {}, MaterialTooltip.prototype.CssClasses_ = { IS_ACTIVE: "is-active" }, MaterialTooltip.prototype.handleMouseEnter_ = function (e) { "use strict"; e.stopPropagation(); var t = e.target.getBoundingClientRect(), s = t.left + t.width / 2, i = -1 * (this.element_.offsetWidth / 2); 0 > s + i ? (this.element_.style.left = 0, this.element_.style.marginLeft = 0) : (this.element_.style.left = s + "px", this.element_.style.marginLeft = i + "px"), this.element_.style.top = t.top + t.height + 10 + "px", this.element_.classList.add(this.CssClasses_.IS_ACTIVE), window.addEventListener("scroll", this.boundMouseLeaveHandler, !1), window.addEventListener("touchmove", this.boundMouseLeaveHandler, !1) }, MaterialTooltip.prototype.handleMouseLeave_ = function (e) { "use strict"; e.stopPropagation(), this.element_.classList.remove(this.CssClasses_.IS_ACTIVE), window.removeEventListener("scroll", this.boundMouseLeaveHandler), window.removeEventListener("touchmove", this.boundMouseLeaveHandler, !1) }, MaterialTooltip.prototype.init = function () { "use strict"; if (this.element_) { var e = this.element_.getAttribute("for"); e && (this.forElement_ = document.getElementById(e)), this.forElement_ && (this.forElement_.getAttribute("tabindex") || this.forElement_.setAttribute("tabindex", "0"), this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this), this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this), this.forElement_.addEventListener("mouseenter", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("click", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("blur", this.boundMouseLeaveHandler), this.forElement_.addEventListener("touchstart", this.boundMouseEnterHandler, !1), this.forElement_.addEventListener("mouseleave", this.boundMouseLeaveHandler)) } }, MaterialTooltip.prototype.mdlDowngrade_ = function () { "use strict"; this.forElement_ && (this.forElement_.removeEventListener("mouseenter", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("click", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("touchstart", this.boundMouseEnterHandler, !1), this.forElement_.removeEventListener("mouseleave", this.boundMouseLeaveHandler)) }, componentHandler.register({ constructor: MaterialTooltip, classAsString: "MaterialTooltip", cssClass: "mdl-tooltip" }), MaterialLayout.prototype.Constant_ = { MAX_WIDTH: "(max-width: 850px)", TAB_SCROLL_PIXELS: 100, MENU_ICON: "menu", CHEVRON_LEFT: "chevron_left", CHEVRON_RIGHT: "chevron_right" }, MaterialLayout.prototype.Mode_ = { STANDARD: 0, SEAMED: 1, WATERFALL: 2, SCROLL: 3 }, MaterialLayout.prototype.CssClasses_ = { CONTAINER: "mdl-layout__container", HEADER: "mdl-layout__header", DRAWER: "mdl-layout__drawer", CONTENT: "mdl-layout__content", DRAWER_BTN: "mdl-layout__drawer-button", ICON: "material-icons", JS_RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_CONTAINER: "mdl-layout__tab-ripple-container", RIPPLE: "mdl-ripple", RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events", HEADER_SEAMED: "mdl-layout__header--seamed", HEADER_WATERFALL: "mdl-layout__header--waterfall", HEADER_SCROLL: "mdl-layout__header--scroll", FIXED_HEADER: "mdl-layout--fixed-header", OBFUSCATOR: "mdl-layout__obfuscator", TAB_BAR: "mdl-layout__tab-bar", TAB_CONTAINER: "mdl-layout__tab-bar-container", TAB: "mdl-layout__tab", TAB_BAR_BUTTON: "mdl-layout__tab-bar-button", TAB_BAR_LEFT_BUTTON: "mdl-layout__tab-bar-left-button", TAB_BAR_RIGHT_BUTTON: "mdl-layout__tab-bar-right-button", PANEL: "mdl-layout__tab-panel", HAS_DRAWER: "has-drawer", HAS_TABS: "has-tabs", HAS_SCROLLING_HEADER: "has-scrolling-header", CASTING_SHADOW: "is-casting-shadow", IS_COMPACT: "is-compact", IS_SMALL_SCREEN: "is-small-screen", IS_DRAWER_OPEN: "is-visible", IS_ACTIVE: "is-active", IS_UPGRADED: "is-upgraded", IS_ANIMATING: "is-animating", ON_LARGE_SCREEN: "mdl-layout--large-screen-only", ON_SMALL_SCREEN: "mdl-layout--small-screen-only" }, MaterialLayout.prototype.contentScrollHandler_ = function () { "use strict"; this.header_.classList.contains(this.CssClasses_.IS_ANIMATING) || (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT) ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW), this.header_.classList.add(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING)) : this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT) && (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW), this.header_.classList.remove(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING))) }, MaterialLayout.prototype.screenSizeHandler_ = function () { "use strict"; this.screenSizeMediaQuery_.matches ? this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN) : (this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN), this.drawer_ && this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN)) }, MaterialLayout.prototype.drawerToggleHandler_ = function () { "use strict"; this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN) }, MaterialLayout.prototype.headerTransitionEndHandler = function () { "use strict"; this.header_.classList.remove(this.CssClasses_.IS_ANIMATING) }, MaterialLayout.prototype.headerClickHandler = function () { "use strict"; this.header_.classList.contains(this.CssClasses_.IS_COMPACT) && (this.header_.classList.remove(this.CssClasses_.IS_COMPACT), this.header_.classList.add(this.CssClasses_.IS_ANIMATING)) }, MaterialLayout.prototype.resetTabState_ = function (e) { "use strict"; for (var t = 0; t0 ? _.classList.add(this.CssClasses_.IS_ACTIVE) : _.classList.remove(this.CssClasses_.IS_ACTIVE), this.tabBar_.scrollLeft0)return; this.setFrameCount(1); var i, n, a = e.currentTarget.getBoundingClientRect(); if (0 === e.clientX && 0 === e.clientY) i = Math.round(a.width / 2), n = Math.round(a.height / 2); else { var l = e.clientX ? e.clientX : e.touches[0].clientX, r = e.clientY ? e.clientY : e.touches[0].clientY; i = Math.round(l - a.left), n = Math.round(r - a.top) } this.setRippleXY(i, n), this.setRippleStyles(!0), window.requestAnimationFrame(this.animFrameHandler.bind(this)) } }, MaterialRipple.prototype.upHandler_ = function (e) { "use strict"; e && 2 !== e.detail && this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE) }, MaterialRipple.prototype.init = function () { "use strict"; if (this.element_) { var e = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER); this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS) || (this.rippleElement_ = this.element_.querySelector("." + this.CssClasses_.RIPPLE), this.frameCount_ = 0, this.rippleSize_ = 0, this.x_ = 0, this.y_ = 0, this.ignoringMouseDown_ = !1, this.boundDownHandler = this.downHandler_.bind(this), this.element_.addEventListener("mousedown", this.boundDownHandler), this.element_.addEventListener("touchstart", this.boundDownHandler), this.boundUpHandler = this.upHandler_.bind(this), this.element_.addEventListener("mouseup", this.boundUpHandler), this.element_.addEventListener("mouseleave", this.boundUpHandler), this.element_.addEventListener("touchend", this.boundUpHandler), this.element_.addEventListener("blur", this.boundUpHandler), this.getFrameCount = function () { return this.frameCount_ }, this.setFrameCount = function (e) { this.frameCount_ = e }, this.getRippleElement = function () { return this.rippleElement_ }, this.setRippleXY = function (e, t) { this.x_ = e, this.y_ = t }, this.setRippleStyles = function (t) { if (null !== this.rippleElement_) { var s, i, n, a = "translate(" + this.x_ + "px, " + this.y_ + "px)"; t ? (i = this.Constant_.INITIAL_SCALE, n = this.Constant_.INITIAL_SIZE) : (i = this.Constant_.FINAL_SCALE, n = this.rippleSize_ + "px", e && (a = "translate(" + this.boundWidth / 2 + "px, " + this.boundHeight / 2 + "px)")), s = "translate(-50%, -50%) " + a + i, this.rippleElement_.style.webkitTransform = s, this.rippleElement_.style.msTransform = s, this.rippleElement_.style.transform = s, t ? this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING) : this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING) } }, this.animFrameHandler = function () { this.frameCount_-- > 0 ? window.requestAnimationFrame(this.animFrameHandler.bind(this)) : this.setRippleStyles(!1) }) } }, MaterialRipple.prototype.mdlDowngrade_ = function () { "use strict"; this.element_.removeEventListener("mousedown", this.boundDownHandler), this.element_.removeEventListener("touchstart", this.boundDownHandler), this.element_.removeEventListener("mouseup", this.boundUpHandler), this.element_.removeEventListener("mouseleave", this.boundUpHandler), this.element_.removeEventListener("touchend", this.boundUpHandler), this.element_.removeEventListener("blur", this.boundUpHandler) }, componentHandler.register({ constructor: MaterialRipple, classAsString: "MaterialRipple", cssClass: "mdl-js-ripple-effect", widget: !1 }); //# sourceMappingURL=material.min.js.map